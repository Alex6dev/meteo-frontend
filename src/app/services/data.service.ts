import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { City } from '../interface/city';
import { BehaviorSubject, Observable } from 'rxjs';
import { ApiAdresseDto } from '../interface/api-adresse-dto';
import { ApiCityCodePostalDto, ApiDataMeteoDto } from '../interface/api-data-meteo-dto';
import { ApiDataMeteo, UnitsDataMeteo } from '../interface/api-data-meteo';

// const fakeDataMeteo:ApiDataMeteo={
//   time:["2023-06-27T00:00",
//   "2023-06-27T01:00",
//   "2023-06-27T02:00",
//   "2023-06-27T03:00",
//   "2023-06-27T04:00",
//   "2023-06-27T05:00",
//   "2023-06-27T06:00",
//   "2023-06-27T07:00",
//   "2023-06-27T08:00",
//   "2023-06-27T09:00",
//   "2023-06-27T10:00",
//   "2023-06-27T11:00",
//   "2023-06-27T12:00",
//   "2023-06-27T13:00",
//   "2023-06-27T14:00",
//   "2023-06-27T15:00",
//   "2023-06-27T16:00",
//   "2023-06-27T17:00",
//   "2023-06-27T18:00",
//   "2023-06-27T19:00",
//   "2023-06-27T20:00",
//   "2023-06-27T21:00",
//   "2023-06-27T22:00",
//   "2023-06-27T23:00",
//   "2023-06-28T00:00",
//   "2023-06-28T01:00",
//   "2023-06-28T02:00",
//   "2023-06-28T03:00",
//   "2023-06-28T04:00",
//   "2023-06-28T05:00",
//   "2023-06-28T06:00",
//   "2023-06-28T07:00",
//   "2023-06-28T08:00",
//   "2023-06-28T09:00",
//   "2023-06-28T10:00",
//   "2023-06-28T11:00",
//   "2023-06-28T12:00",
//   "2023-06-28T13:00",
//   "2023-06-28T14:00",
//   "2023-06-28T15:00",
//   "2023-06-28T16:00",
//   "2023-06-28T17:00",
//   "2023-06-28T18:00",
//   "2023-06-28T19:00",
//   "2023-06-28T20:00",
//   "2023-06-28T21:00",
//   "2023-06-28T22:00",
//   "2023-06-28T23:00",
//   "2023-06-29T00:00",
//   "2023-06-29T01:00",
//   "2023-06-29T02:00",
//   "2023-06-29T03:00",
//   "2023-06-29T04:00",
//   "2023-06-29T05:00",
//   "2023-06-29T06:00",
//   "2023-06-29T07:00",
//   "2023-06-29T08:00",
//   "2023-06-29T09:00",
//   "2023-06-29T10:00",
//   "2023-06-29T11:00",
//   "2023-06-29T12:00",
//   "2023-06-29T13:00",
//   "2023-06-29T14:00",
//   "2023-06-29T15:00",
//   "2023-06-29T16:00",
//   "2023-06-29T17:00",
//   "2023-06-29T18:00",
//   "2023-06-29T19:00",
//   "2023-06-29T20:00",
//   "2023-06-29T21:00",
//   "2023-06-29T22:00",
//   "2023-06-29T23:00",
//   "2023-06-30T00:00",
//   "2023-06-30T01:00",
//   "2023-06-30T02:00",
//   "2023-06-30T03:00",
//   "2023-06-30T04:00",
//   "2023-06-30T05:00",
//   "2023-06-30T06:00",
//   "2023-06-30T07:00",
//   "2023-06-30T08:00",
//   "2023-06-30T09:00",
//   "2023-06-30T10:00",
//   "2023-06-30T11:00",
//   "2023-06-30T12:00",
//   "2023-06-30T13:00",
//   "2023-06-30T14:00",
//   "2023-06-30T15:00",
//   "2023-06-30T16:00",
//   "2023-06-30T17:00",
//   "2023-06-30T18:00",
//   "2023-06-30T19:00",
//   "2023-06-30T20:00",
//   "2023-06-30T21:00",
//   "2023-06-30T22:00",
//   "2023-06-30T23:00",
//   "2023-07-01T00:00",
//   "2023-07-01T01:00",
//   "2023-07-01T02:00",
//   "2023-07-01T03:00",
//   "2023-07-01T04:00",
//   "2023-07-01T05:00",
//   "2023-07-01T06:00",
//   "2023-07-01T07:00",
//   "2023-07-01T08:00",
//   "2023-07-01T09:00",
//   "2023-07-01T10:00",
//   "2023-07-01T11:00",
//   "2023-07-01T12:00",
//   "2023-07-01T13:00",
//   "2023-07-01T14:00",
//   "2023-07-01T15:00",
//   "2023-07-01T16:00",
//   "2023-07-01T17:00",
//   "2023-07-01T18:00",
//   "2023-07-01T19:00",
//   "2023-07-01T20:00",
//   "2023-07-01T21:00",
//   "2023-07-01T22:00",
//   "2023-07-01T23:00",
//   "2023-07-02T00:00",
//   "2023-07-02T01:00",
//   "2023-07-02T02:00",
//   "2023-07-02T03:00",
//   "2023-07-02T04:00",
//   "2023-07-02T05:00",
//   "2023-07-02T06:00",
//   "2023-07-02T07:00",
//   "2023-07-02T08:00",
//   "2023-07-02T09:00",
//   "2023-07-02T10:00",
//   "2023-07-02T11:00",
//   "2023-07-02T12:00",
//   "2023-07-02T13:00",
//   "2023-07-02T14:00",
//   "2023-07-02T15:00",
//   "2023-07-02T16:00",
//   "2023-07-02T17:00",
//   "2023-07-02T18:00",
//   "2023-07-02T19:00",
//   "2023-07-02T20:00",
//   "2023-07-02T21:00",
//   "2023-07-02T22:00",
//   "2023-07-02T23:00",
//   "2023-07-03T00:00",
//   "2023-07-03T01:00",
//   "2023-07-03T02:00",
//   "2023-07-03T03:00",
//   "2023-07-03T04:00",
//   "2023-07-03T05:00",
//   "2023-07-03T06:00",
//   "2023-07-03T07:00",
//   "2023-07-03T08:00",
//   "2023-07-03T09:00",
//   "2023-07-03T10:00",
//   "2023-07-03T11:00",
//   "2023-07-03T12:00",
//   "2023-07-03T13:00",
//   "2023-07-03T14:00",
//   "2023-07-03T15:00",
//   "2023-07-03T16:00",
//   "2023-07-03T17:00",
//   "2023-07-03T18:00",
//   "2023-07-03T19:00",
//   "2023-07-03T20:00",
//   "2023-07-03T21:00",
//   "2023-07-03T22:00",
//   "2023-07-03T23:00"],
//   temperature_2m:[17.1,
//     16.6,
//     16.0,
//     15.0,
//     14.4,
//     14.4,
//     15.6,
//     16.9,
//     18.4,
//     20.1,
//     21.7,
//     23.0,
//     24.0,
//     24.3,
//     24.6,
//     25.1,
//     24.9,
//     24.5,
//     23.8,
//     22.5,
//     21.5,
//     20.4,
//     19.3,
//     18.3,
//     17.5,
//     17.0,
//     16.7,
//     16.5,
//     16.4,
//     16.6,
//     17.4,
//     18.7,
//     20.2,
//     21.6,
//     23.1,
//     24.6,
//     26.2,
//     26.6,
//     25.9,
//     26.9,
//     25.5,
//     25.2,
//     25.0,
//     24.7,
//     24.1,
//     23.3,
//     22.8,
//     22.1,
//     21.2,
//     20.8,
//     20.6,
//     20.3,
//     20.1,
//     20.1,
//     20.3,
//     21.2,
//     22.1,
//     23.1,
//     23.8,
//     24.9,
//     25.5,
//     25.9,
//     23.2,
//     22.9,
//     22.3,
//     22.0,
//     21.7,
//     20.9,
//     20.2,
//     19.5,
//     18.9,
//     18.2,
//     17.5,
//     16.9,
//     16.4,
//     16.0,
//     15.8,
//     15.7,
//     16.2,
//     17.1,
//     18.5,
//     19.8,
//     20.8,
//     21.8,
//     22.6,
//     23.4,
//     24.0,
//     24.2,
//     23.9,
//     23.1,
//     22.3,
//     21.6,
//     20.8,
//     20.1,
//     19.5,
//     18.9,
//     18.4,
//     17.7,
//     17.1,
//     16.6,
//     16.5,
//     16.6,
//     17.0,
//     17.7,
//     18.7,
//     19.4,
//     19.7,
//     19.7,
//     19.9,
//     20.6,
//     21.5,
//     22.0,
//     21.8,
//     21.2,
//     20.7,
//     20.3,
//     19.9,
//     19.5,
//     19.0,
//     18.5,
//     18.1,
//     17.1,
//     16.2,
//     15.6,
//     15.1,
//     14.9,
//     15.2,
//     16.4,
//     18.1,
//     19.7,
//     20.8,
//     21.7,
//     22.5,
//     23.2,
//     23.7,
//     24.0,
//     24.1,
//     23.9,
//     23.4,
//     22.4,
//     21.1,
//     19.8,
//     18.8,
//     18.0,
//     17.2,
//     16.3,
//     15.5,
//     15.1,
//     15.2,
//     15.6,
//     16.5,
//     18.0,
//     19.9,
//     21.6,
//     22.8,
//     23.7,
//     24.6,
//     25.4,
//     26.1,
//     26.6,
//     26.8,
//     26.7,
//     26.3,
//     25.4,
//     24.2,
//     23.0,
//     21.8,
//     20.6],
//   rain:[0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.10,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.20,
//     0.20,
//     0.20,
//     0.10,
//     0.10,
//     0.10,
//     0.30,
//     0.30,
//     0.30,
//     0.20,
//     0.20,
//     0.20,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00],
//   uv_index:[0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.20,
//     0.90,
//     1.80,
//     2.95,
//     4.40,
//     5.95,
//     6.80,
//     7.00,
//     7.15,
//     6.75,
//     5.75,
//     4.45,
//     2.75,
//     1.60,
//     0.65,
//     0.10,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.20,
//     0.90,
//     2.00,
//     3.35,
//     4.75,
//     6.00,
//     6.90,
//     7.20,
//     7.00,
//     6.75,
//     5.75,
//     4.30,
//     2.40,
//     1.05,
//     0.45,
//     0.10,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.10,
//     0.25,
//     0.60,
//     1.15,
//     1.70,
//     2.15,
//     2.95,
//     2.55,
//     1.75,
//     6.55,
//     4.80,
//     2.05,
//     1.85,
//     0.65,
//     0.10,
//     0.05,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.20,
//     0.85,
//     1.90,
//     3.20,
//     4.60,
//     5.45,
//     6.15,
//     3.95,
//     6.05,
//     5.75,
//     3.00,
//     2.55,
//     1.20,
//     0.75,
//     0.30,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.05,
//     0.10,
//     0.20,
//     0.45,
//     0.60,
//     0.60,
//     0.80,
//     1.40,
//     2.90,
//     3.65,
//     2.35,
//     3.00,
//     1.70,
//     0.70,
//     0.10,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.05,
//     0.35,
//     1.10,
//     2.20,
//     3.30,
//     4.55,
//     5.80,
//     6.70,
//     7.05,
//     7.05,
//     6.65,
//     5.70,
//     4.35,
//     3.10,
//     2.00,
//     1.00,
//     0.30,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.00,
//     0.05,
//     0.35,
//     1.15,
//     2.20,
//     3.10,
//     3.70,
//     4.15,
//     4.35,
//     4.25,
//     3.90,
//     3.45,
//     2.90,
//     2.20,
//     1.60,
//     1.10,
//     0.65,
//     0.30,
//     0.10,
//     0.05]
// }

// const fakeUnitsData:UnitsDataMeteo={
//   temperature_2m:"°C",
//   rain:"mm",
//   uv_index:""
// }

@Injectable({
  providedIn: 'root'
})
export class DataService {
  //data meteo of city
  private dataMeteo= new BehaviorSubject<ApiDataMeteo|undefined>(undefined);
  dataMeteo$=this.dataMeteo.asObservable();

  //units data 
  private unitsDataMeteo=new BehaviorSubject<UnitsDataMeteo|undefined>(undefined);
  unitsDataMeteo$=this.unitsDataMeteo.asObservable();

  constructor(
    private http : HttpClient
  ) {}

  setUnitsDataMeteo(unitsDataMeteo:UnitsDataMeteo|undefined){
    this.unitsDataMeteo.next(unitsDataMeteo);
  }
  setDataMeteo(dataMeteo:ApiDataMeteo|undefined){
    this.dataMeteo.next(dataMeteo);
    console.log(dataMeteo);
    
  }

  getDataMeteo(coordonate:number[]):Observable<boolean>{ 
    return new Observable<boolean>(subscriber=>{
      this.http.get<ApiDataMeteoDto>(`https://api.open-meteo.com/v1/forecast?latitude=${coordonate[1]}&longitude=${coordonate[0]}5&hourly=temperature_2m,rain,uv_index`).subscribe({
        next:(value)=>{
          console.log(value);
          
          this.setUnitsDataMeteo({
            temperature_2m: value.hourly_units.temperature_2m,
            rain:           value.hourly_units.rain,
            uv_index:       value.hourly_units.uv_index
          });
          this.setDataMeteo({
            time:           this.setDataTimeDayHoraire(value.hourly.time),
            temperature_2m: value.hourly.temperature_2m,
            rain:           value.hourly.rain,
            uv_index:       value.hourly.uv_index
          });
          subscriber.next(true);
              
        }, 
        error:(err)=>{
          console.log("error: "+err);
          subscriber.next(false);
        }
      })
    })   
  }

  getGeographicalCoordinatesWithCityName(city:string):Observable<City[]>{
    return new Observable<City[]>(subscriber=>{
      this.http.get<ApiAdresseDto>(`https://api-adresse.data.gouv.fr/search/?q=${city}&type=municipality`).subscribe({
        next:(value)=>{
          if(value.features.length>0){
            let tabCity:City[]=[];
            value.features.forEach((feature)=>{
              tabCity.push({
                nameCity:feature.properties.city,
                postcode: feature.properties.postcode,
                coordinate:[
                  feature.geometry.coordinates[0],
                  feature.geometry.coordinates[1]
                ]
              })
            })
            subscriber.next(tabCity);
            
          }else{
            //error
          }
          
        },
        error:(err)=>{
          console.log("error: "+err);
        }
      })
    })
  }
  getGeographicalCoordinatesWithCityCodepost(city:string):Observable<City[]>{
    return new Observable<City[]>(subscriber=>{
      this.http.get<ApiCityCodePostalDto[]>(`https://geo.api.gouv.fr/communes?codePostal=${city}`).subscribe({
        next:(value)=>{
          console.log(value);
          if(value.length>0){
            let tabCity:City[]=[];
            value.forEach((feature)=>{
              tabCity.push({
                nameCity:feature.nom,
                postcode: feature.codesPostaux[0]
              })
            })
            subscriber.next(tabCity);
            
          }else{
            //error
          }
          
        },
        error:(err)=>{
          console.log("error: "+err);
        }
      })
    })
  }

  private setDataTimeDayHoraire(tabHoraire:string[]):string[]{
    let tabDay=["Lundi","Mardi","Mercredi","Jeudi","Vendredi","Samedi","Dimanche"]
    
    for (let i = 0; i < tabHoraire.length; i++) {
      tabHoraire[i]=tabDay[new Date(tabHoraire[i]).getDay()]+" "+tabHoraire[i].split('T')[1];
      
    }
    return tabHoraire;
  }
}
